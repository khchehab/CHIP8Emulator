package chip.eight.emulator.core;

import chip.eight.emulator.util.Constants;

public class Memory {
    private static final int[] FONT_SET = new int[] {
            0xf0, 0x90, 0x90, 0x90, 0xf0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xf0, 0x10, 0xf0, 0x80, 0xf0, // 2
            0xf0, 0x10, 0xf0, 0x10, 0xf0, // 3
            0x90, 0x90, 0xf0, 0x10, 0x10, // 4
            0xf0, 0x80, 0xf0, 0x10, 0xf0, // 5
            0xf0, 0x80, 0xf0, 0x90, 0xf0, // 6
            0xf0, 0x10, 0x20, 0x40, 0x40, // 7
            0xf0, 0x90, 0xf0, 0x90, 0xf0, // 8
            0xf0, 0x90, 0xf0, 0x10, 0xf0, // 9
            0xf0, 0x90, 0xf0, 0x90, 0x90, // a
            0xe0, 0x90, 0xe0, 0x90, 0xe0, // b
            0xf0, 0x80, 0x80, 0x80, 0xf0, // c
            0xe0, 0x90, 0x90, 0x90, 0xe0, // d
            0xf0, 0x80, 0xf0, 0x80, 0xf0, // e
            0xf0, 0x80, 0xf0, 0x80, 0x80  // f
    };

    private int[] mem;

    public Memory(int size) {
        mem = new int[size];
    }

    public int read(int address) {
        return mem[address] & Constants.BYTE_MASK;
    }

    public void write(int address, int value) {
        mem[address] = value & Constants.BYTE_MASK;
    }

    public void loadFont() {
        for(int i = 0; i < FONT_SET.length; i++) {
            mem[i] = FONT_SET[i];
        }
    }
}
